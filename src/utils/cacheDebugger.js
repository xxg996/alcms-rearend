/**
 * ÁºìÂ≠òË∞ÉËØïÂ∑•ÂÖ∑
 * Áî®‰∫éËØäÊñ≠ÁºìÂ≠òÁõ∏ÂÖ≥ÈóÆÈ¢ò
 */

const { cache } = require('./cache');
const { logger } = require('./logger');

class CacheDebugger {
  /**
   * Ëé∑ÂèñÊâÄÊúâÁºìÂ≠òÈîÆÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
   */
  async getAllKeys() {
    try {
      if (cache.isConnected && cache.client) {
        const keys = await cache.client.keys('*');
        const result = {
          total: keys.length,
          keys: keys,
          patterns: this.groupKeysByPattern(keys)
        };

        console.log('=== ÁºìÂ≠òÈîÆÂàÜÊûê ===');
        console.log(`ÊÄªËÆ°: ${result.total} ‰∏™ÈîÆ`);
        console.log('\n=== ÊåâÊ®°ÂºèÂàÜÁªÑ ===');
        Object.entries(result.patterns).forEach(([pattern, keys]) => {
          console.log(`${pattern}: ${keys.length} ‰∏™ÈîÆ`);
          keys.slice(0, 3).forEach(key => console.log(`  - ${key}`));
          if (keys.length > 3) console.log(`  ... ËøòÊúâ ${keys.length - 3} ‰∏™`);
        });

        return result;
      } else if (cache.memoryCache) {
        const keys = Array.from(cache.memoryCache.keys());
        const result = {
          total: keys.length,
          keys: keys,
          patterns: this.groupKeysByPattern(keys)
        };

        console.log('=== ÂÜÖÂ≠òÁºìÂ≠òÈîÆÂàÜÊûê ===');
        console.log(`ÊÄªËÆ°: ${result.total} ‰∏™ÈîÆ`);
        console.log('\n=== ÊåâÊ®°ÂºèÂàÜÁªÑ ===');
        Object.entries(result.patterns).forEach(([pattern, keys]) => {
          console.log(`${pattern}: ${keys.length} ‰∏™ÈîÆ`);
          keys.slice(0, 3).forEach(key => console.log(`  - ${key}`));
          if (keys.length > 3) console.log(`  ... ËøòÊúâ ${keys.length - 3} ‰∏™`);
        });

        return result;
      }

      return { total: 0, keys: [], patterns: {} };
    } catch (error) {
      logger.error('Ëé∑ÂèñÁºìÂ≠òÈîÆÂ§±Ë¥•:', error);
      return { total: 0, keys: [], patterns: {}, error: error.message };
    }
  }

  /**
   * ÊåâÊ®°ÂºèÂàÜÁªÑÈîÆÂêç
   */
  groupKeysByPattern(keys) {
    const patterns = {};

    keys.forEach(key => {
      // ÊèêÂèñÂâçÁºÄÊ®°Âºè
      const parts = key.split(':');
      const pattern = parts.length > 1 ? `${parts[0]}:*` : key;

      if (!patterns[pattern]) {
        patterns[pattern] = [];
      }
      patterns[pattern].push(key);
    });

    return patterns;
  }

  /**
   * ÊµãËØïÁºìÂ≠òÊ∏ÖÁêÜÊ®°Âºè
   */
  async testClearPattern(pattern) {
    try {
      console.log(`\n=== ÊµãËØïÊ∏ÖÁêÜÊ®°Âºè: ${pattern} ===`);

      // Ëé∑ÂèñÂåπÈÖçÁöÑÈîÆ
      let matchedKeys = [];
      if (cache.isConnected && cache.client) {
        matchedKeys = await cache.client.keys(pattern);
      } else if (cache.memoryCache) {
        const regexPattern = pattern
          .replace(/\*/g, '.*')
          .replace(/\?/g, '.')
          .replace(/\[([^\]]+)\]/g, '[$1]');
        const regex = new RegExp(`^${regexPattern}$`);

        matchedKeys = Array.from(cache.memoryCache.keys()).filter(key => regex.test(key));
      }

      console.log(`ÂåπÈÖçÂà∞ ${matchedKeys.length} ‰∏™ÈîÆ:`);
      matchedKeys.forEach(key => console.log(`  - ${key}`));

      if (matchedKeys.length > 0) {
        console.log('\nÊâßË°åÂà†Èô§...');
        const deleted = await cache.delByPattern(pattern);
        console.log(`Âà†Èô§ÁªìÊûú: ${deleted ? 'ÊàêÂäü' : 'Â§±Ë¥•'}`);

        // È™åËØÅÂà†Èô§ÁªìÊûú
        let remainingKeys = [];
        if (cache.isConnected && cache.client) {
          remainingKeys = await cache.client.keys(pattern);
        } else if (cache.memoryCache) {
          const regexPattern = pattern
            .replace(/\*/g, '.*')
            .replace(/\?/g, '.')
            .replace(/\[([^\]]+)\]/g, '[$1]');
          const regex = new RegExp(`^${regexPattern}$`);

          remainingKeys = Array.from(cache.memoryCache.keys()).filter(key => regex.test(key));
        }

        console.log(`È™åËØÅ: Ââ©‰Ωô ${remainingKeys.length} ‰∏™ÂåπÈÖçÈîÆ`);
        if (remainingKeys.length > 0) {
          console.log('Ââ©‰ΩôÈîÆ:');
          remainingKeys.forEach(key => console.log(`  - ${key}`));
        }
      } else {
        console.log('Ê≤°ÊúâÂåπÈÖçÁöÑÈîÆ');
      }

      return { pattern, matchedKeys, success: matchedKeys.length === 0 || await cache.delByPattern(pattern) };
    } catch (error) {
      logger.error('ÊµãËØïÁºìÂ≠òÊ∏ÖÁêÜÂ§±Ë¥•:', error);
      return { pattern, error: error.message, success: false };
    }
  }

  /**
   * ÂÆåÊï¥ÁöÑÁºìÂ≠òËØäÊñ≠
   */
  async diagnose() {
    console.log('\nüîç ÂºÄÂßãÁºìÂ≠òËØäÊñ≠...\n');

    // 1. Ëé∑ÂèñÁºìÂ≠òËøûÊé•Áä∂ÊÄÅ
    console.log('=== ÁºìÂ≠òËøûÊé•Áä∂ÊÄÅ ===');
    console.log(`ËøûÊé•Áä∂ÊÄÅ: ${cache.isConnected ? 'Â∑≤ËøûÊé•' : 'Êú™ËøûÊé•'}`);
    console.log(`ÁºìÂ≠òÁ±ªÂûã: ${cache.isConnected ? 'Redis' : 'ÂÜÖÂ≠òÁºìÂ≠ò'}`);

    // 2. Ëé∑ÂèñÊâÄÊúâÈîÆ
    const keysInfo = await this.getAllKeys();

    // 3. ÊµãËØïÂ∏∏ËßÅÁöÑÊ∏ÖÁêÜÊ®°Âºè
    console.log('\n=== ÊµãËØïÊ∏ÖÁêÜÊ®°Âºè ===');
    const testPatterns = [
      'categories:*',
      'tags:*',
      'resources:*',
      'api:*',
      'user:*',
      'stats:*'
    ];

    for (const pattern of testPatterns) {
      const result = await this.testClearPattern(pattern);
      if (result.error) {
        console.log(`‚ùå ${pattern}: ${result.error}`);
      } else if (result.success) {
        console.log(`‚úÖ ${pattern}: Ê∏ÖÁêÜÊàêÂäü`);
      } else {
        console.log(`‚ö†Ô∏è ${pattern}: Ê∏ÖÁêÜÂèØËÉΩÂ§±Ë¥•`);
      }
    }

    // 4. ÁºìÂ≠òÁªüËÆ°
    const stats = await cache.getStats();
    console.log('\n=== ÁºìÂ≠òÁªüËÆ° ===');
    console.log(JSON.stringify(stats, null, 2));

    console.log('\n‚úÖ ÁºìÂ≠òËØäÊñ≠ÂÆåÊàê');

    return {
      connectionStatus: cache.isConnected,
      cacheType: cache.isConnected ? 'Redis' : 'Memory',
      keysInfo,
      stats
    };
  }

  /**
   * Ê∏ÖÁ©∫ÊâÄÊúâÁºìÂ≠òÔºàÂç±Èô©Êìç‰ΩúÔºâ
   */
  async clearAll(confirm = false) {
    if (!confirm) {
      console.log('‚ö†Ô∏è ËøôÊòØ‰∏Ä‰∏™Âç±Èô©Êìç‰ΩúÔºå‰ºöÊ∏ÖÁ©∫ÊâÄÊúâÁºìÂ≠òÊï∞ÊçÆ');
      console.log('Â¶ÇÊûúÁ°ÆËÆ§Ë¶ÅÊâßË°åÔºåËØ∑‰º†ÂÖ• confirm=true ÂèÇÊï∞');
      return false;
    }

    try {
      console.log('üóëÔ∏è Ê≠£Âú®Ê∏ÖÁ©∫ÊâÄÊúâÁºìÂ≠ò...');
      const result = await cache.flush();
      console.log(result ? '‚úÖ ÁºìÂ≠òÊ∏ÖÁ©∫ÊàêÂäü' : '‚ùå ÁºìÂ≠òÊ∏ÖÁ©∫Â§±Ë¥•');
      return result;
    } catch (error) {
      logger.error('Ê∏ÖÁ©∫ÁºìÂ≠òÂ§±Ë¥•:', error);
      console.log('‚ùå ÁºìÂ≠òÊ∏ÖÁ©∫Â§±Ë¥•:', error.message);
      return false;
    }
  }

  /**
   * ÂàõÂª∫ÊµãËØïÁºìÂ≠òÊï∞ÊçÆ
   */
  async createTestData() {
    console.log('üìù ÂàõÂª∫ÊµãËØïÁºìÂ≠òÊï∞ÊçÆ...');

    const testData = [
      { key: 'categories:tree:false', value: { test: 'category tree data' } },
      { key: 'categories:list', value: { test: 'category list data' } },
      { key: 'tags:list:1:20', value: { test: 'tags list data' } },
      { key: 'tags:popular', value: { test: 'popular tags data' } },
      { key: 'resources:list:1:1:20:created_at:desc', value: { test: 'resources list data' } },
      { key: 'api:resources:list:anonymous:1:20', value: { test: 'api resources data' } },
      { key: 'user:profile:123', value: { test: 'user profile data' } },
      { key: 'stats:overview', value: { test: 'stats data' } }
    ];

    for (const { key, value } of testData) {
      await cache.set(key, value, 3600);
      console.log(`‚úÖ ÂàõÂª∫: ${key}`);
    }

    console.log('‚úÖ ÊµãËØïÊï∞ÊçÆÂàõÂª∫ÂÆåÊàê');
    return testData.length;
  }
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§Êñá‰ª∂ÔºåÊâßË°åËØäÊñ≠
if (require.main === module) {
  (async () => {
    await cache.initialize();
    const cacheDebugger = new CacheDebugger();

    // Ê£ÄÊü•ÂëΩ‰ª§Ë°åÂèÇÊï∞
    const args = process.argv.slice(2);

    if (args.includes('--clear-all')) {
      await cacheDebugger.clearAll(args.includes('--confirm'));
    } else if (args.includes('--create-test-data')) {
      await cacheDebugger.createTestData();
    } else if (args.includes('--test-pattern') && args[args.indexOf('--test-pattern') + 1]) {
      const pattern = args[args.indexOf('--test-pattern') + 1];
      await cacheDebugger.testClearPattern(pattern);
    } else {
      await cacheDebugger.diagnose();
    }

    await cache.close();
    process.exit(0);
  })().catch(console.error);
}

module.exports = CacheDebugger;