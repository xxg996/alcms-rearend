{
  "info": {
    "name": "Alcms 后端管理系统 API",
    "description": "基于 Node.js + Express.js + PostgreSQL 构建的用户权限管理系统\n\n## 功能特性\n- JWT 双令牌认证机制\n- RBAC 权限控制模型\n- 四级角色体系（用户/VIP/版主/管理员）\n- 用户状态管理（正常/封禁/冻结）\n- 密码安全（bcrypt 加密）\n- 请求频率限制\n- 输入验证与安全防护\n\n## 使用说明\n1. 先设置环境变量中的 baseUrl\n2. 执行用户注册/登录获取访问令牌\n3. 令牌会自动保存到环境变量中\n4. 后续请求会自动使用保存的令牌\n\n## 环境变量\n- `baseUrl`: API 基础地址 (http://localhost:3000)\n- `accessToken`: 访问令牌（登录后自动设置）\n- `refreshToken`: 刷新令牌（登录后自动设置）\n- `userId`: 当前用户ID（登录后自动设置）",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "alcms-api",
    "_collection_link": ""
  },
  "item": [
    {
      "name": "🔐 认证管理",
      "description": "用户注册、登录、令牌管理等认证相关接口",
      "item": [
        {
          "name": "用户注册",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"TestPass123!\",\n  \"nickname\": \"测试用户\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "注册新用户账号\n\n### 请求参数\n- `username`: 用户名（3-50字符，字母数字下划线）\n- `email`: 邮箱地址\n- `password`: 密码（至少6字符，建议包含大小写字母和数字）\n- `nickname`: 昵称（可选，1-100字符）\n\n### 响应数据\n- 用户基本信息\n- JWT 访问令牌和刷新令牌\n- 默认分配普通用户角色"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// 测试响应状态",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// 测试响应结构",
                  "pm.test(\"Response has required fields\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('user');",
                  "    pm.expect(responseJson.data).to.have.property('tokens');",
                  "});",
                  "",
                  "// 保存令牌到环境变量",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('accessToken', responseJson.data.tokens.accessToken);",
                  "    pm.environment.set('refreshToken', responseJson.data.tokens.refreshToken);",
                  "    pm.environment.set('userId', responseJson.data.user.id);",
                  "    console.log('Tokens saved to environment variables');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "用户登录",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"TestPass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "用户登录验证\n\n### 请求参数\n- `email`: 注册时使用的邮箱地址\n- `password`: 用户密码\n\n### 响应数据\n- 用户信息（包含角色列表）\n- JWT 访问令牌和刷新令牌\n- 令牌类型和过期时间"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// 测试响应状态",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// 测试登录成功",
                  "pm.test(\"Login successful\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.equal('登录成功');",
                  "});",
                  "",
                  "// 保存令牌和用户信息",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('accessToken', responseJson.data.tokens.accessToken);",
                  "    pm.environment.set('refreshToken', responseJson.data.tokens.refreshToken);",
                  "    pm.environment.set('userId', responseJson.data.user.id);",
                  "    pm.environment.set('userEmail', responseJson.data.user.email);",
                  "    console.log('Login successful, tokens updated');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "刷新访问令牌",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "refresh"]
            },
            "description": "使用刷新令牌获取新的访问令牌\n\n### 请求参数\n- `refreshToken`: 有效的刷新令牌\n\n### 响应数据\n- 新的访问令牌和刷新令牌\n- 旧的刷新令牌会被撤销"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// 测试响应状态",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// 更新令牌",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('accessToken', responseJson.data.tokens.accessToken);",
                  "    pm.environment.set('refreshToken', responseJson.data.tokens.refreshToken);",
                  "    console.log('Tokens refreshed successfully');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "获取当前用户信息",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "profile"]
            },
            "description": "获取当前登录用户的详细信息\n\n### 认证要求\n需要有效的访问令牌\n\n### 响应数据\n- 用户基本信息\n- 用户角色列表\n- 用户权限列表"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// 测试响应状态",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// 测试响应结构",
                  "pm.test(\"Profile data structure\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('user');",
                  "    pm.expect(responseJson.data).to.have.property('roles');",
                  "    pm.expect(responseJson.data).to.have.property('permissions');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "用户登出",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "logout"]
            },
            "description": "用户登出，撤销刷新令牌\n\n### 请求参数\n- `refreshToken`: 要撤销的刷新令牌（可选）\n\n### 响应数据\n- 登出成功确认消息"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// 测试响应状态",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// 清除环境变量中的令牌",
                  "if (pm.response.code === 200) {",
                  "    pm.environment.unset('accessToken');",
                  "    pm.environment.unset('refreshToken');",
                  "    console.log('Logged out, tokens cleared');",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "👤 用户管理",
      "description": "用户资料管理、用户列表查询等功能",
      "item": [
        {
          "name": "更新用户资料",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nickname\": \"新昵称\",\n  \"avatar_url\": \"https://example.com/avatar.jpg\",\n  \"bio\": \"这是我的个人简介\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "profile"]
            },
            "description": "更新当前用户的个人资料\n\n### 认证要求\n需要有效的访问令牌\n\n### 请求参数\n- `nickname`: 昵称（1-100字符）\n- `avatar_url`: 头像URL（可选，最长500字符）\n- `bio`: 个人简介（可选，最长500字符）\n\n### 响应数据\n- 更新后的用户信息"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Profile updated successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.equal('用户资料更新成功');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "获取用户列表 (管理员)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users?page=1&limit=20&status=normal&search=",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "页码（从1开始）"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "每页数量"
                },
                {
                  "key": "status",
                  "value": "normal",
                  "description": "用户状态过滤（normal/banned/frozen）"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "搜索关键词（用户名、邮箱、昵称）"
                }
              ]
            },
            "description": "获取系统用户列表（管理员权限）\n\n### 认证要求\n需要 `user:list` 权限（管理员角色）\n\n### 查询参数\n- `page`: 页码（默认1）\n- `limit`: 每页数量（默认20）\n- `status`: 状态过滤（可选）\n- `search`: 搜索关键词（可选）\n\n### 响应数据\n- 用户列表\n- 分页信息"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Users list structure\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('users');",
                  "    pm.expect(responseJson.data).to.have.property('pagination');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "获取用户统计 (管理员)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "stats"]
            },
            "description": "获取用户统计信息（管理员权限）\n\n### 认证要求\n需要管理员角色\n\n### 响应数据\n- 总用户数\n- 活跃用户数\n- 封禁用户数\n- 冻结用户数\n- 最近注册数量\n- 按角色统计"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Stats data structure\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('totalUsers');",
                  "    pm.expect(responseJson.data).to.have.property('activeUsers');",
                  "    pm.expect(responseJson.data).to.have.property('roleStats');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "获取指定用户信息",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}"]
            },
            "description": "获取指定用户的详细信息\n\n### 认证要求\n用户只能查看自己的信息，管理员可以查看任何用户\n\n### 响应数据\n- 用户详细信息\n- 用户角色列表\n- 用户权限列表"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User data structure\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('user');",
                  "    pm.expect(responseJson.data).to.have.property('roles');",
                  "    pm.expect(responseJson.data).to.have.property('permissions');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "更新用户状态 (管理员)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"banned\",\n  \"reason\": \"违反社区规则\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}", "status"]
            },
            "description": "更新用户状态（管理员权限）\n\n### 认证要求\n需要 `user:ban` 权限（管理员角色）\n\n### 请求参数\n- `status`: 新状态（normal/banned/frozen）\n- `reason`: 操作原因（可选）\n\n### 响应数据\n- 更新后的用户状态信息"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Status updated successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.include('用户状态已更新');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "分配用户角色 (管理员)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"roleName\": \"vip\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}", "roles"]
            },
            "description": "为用户分配角色（管理员权限）\n\n### 认证要求\n需要 `role:assign` 权限（管理员角色）\n\n### 请求参数\n- `roleName`: 角色名称（user/vip/moderator/admin）\n\n### 响应数据\n- 用户信息\n- 更新后的角色列表"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Role assigned successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.equal('角色分配成功');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "移除用户角色 (管理员)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"roleName\": \"vip\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{userId}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{userId}}", "roles"]
            },
            "description": "移除用户角色（管理员权限）\n\n### 认证要求\n需要 `role:assign` 权限（管理员角色）\n\n### 请求参数\n- `roleName`: 要移除的角色名称\n\n### 响应数据\n- 用户信息\n- 更新后的角色列表"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Role removed successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.equal('角色移除成功');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🔍 系统信息",
      "description": "系统状态检查和API信息",
      "item": [
        {
          "name": "健康检查",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "检查服务器健康状态\n\n### 响应数据\n- 服务状态\n- 时间戳\n- 版本信息"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Service is healthy\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.include('运行正常');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "API 文档",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api",
              "host": ["{{baseUrl}}"],
              "path": ["api"]
            },
            "description": "获取API文档和端点列表\n\n### 响应数据\n- API 版本信息\n- 可用端点列表\n- 功能特性说明"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"API documentation structure\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('version');",
                  "    pm.expect(responseJson).to.have.property('endpoints');",
                  "    pm.expect(responseJson).to.have.property('features');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🧪 测试场景",
      "description": "完整的API测试场景和工作流",
      "item": [
        {
          "name": "完整用户注册登录流程",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"flowtest_{{$randomInt}}\",\n  \"email\": \"flowtest{{$randomInt}}@example.com\",\n  \"password\": \"FlowTest123!\",\n  \"nickname\": \"流程测试用户\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "测试完整的用户注册流程\n\n### 测试内容\n1. 使用随机用户名和邮箱注册\n2. 验证注册成功\n3. 自动保存令牌\n4. 验证用户默认角色"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// 测试注册成功",
                  "pm.test(\"Registration successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});",
                  "",
                  "// 保存用户信息进行后续测试",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('testUserId', responseJson.data.user.id);",
                  "    pm.environment.set('testUserEmail', responseJson.data.user.email);",
                  "    pm.environment.set('testAccessToken', responseJson.data.tokens.accessToken);",
                  "    ",
                  "    // 立即测试获取用户信息",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/api/auth/profile',",
                  "        method: 'GET',",
                  "        header: {",
                  "            'Authorization': 'Bearer ' + responseJson.data.tokens.accessToken",
                  "        }",
                  "    }, function (err, response) {",
                  "        if (!err) {",
                  "            pm.test('Profile fetch after registration', function() {",
                  "                pm.expect(response.code).to.equal(200);",
                  "                const profileData = response.json();",
                  "                pm.expect(profileData.data.user.id).to.equal(responseJson.data.user.id);",
                  "            });",
                  "        }",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "权限测试 - 无权限访问",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{testAccessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            },
            "description": "测试普通用户访问需要管理员权限的接口\n\n### 预期结果\n应该返回403权限不足错误"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// 测试权限被拒绝",
                  "pm.test(\"Access denied for insufficient permissions\", function () {",
                  "    pm.response.to.have.status(403);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('权限');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "令牌刷新测试",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "refresh"]
            },
            "description": "测试令牌刷新机制\n\n### 测试内容\n1. 使用有效刷新令牌获取新令牌\n2. 验证旧令牌被撤销\n3. 验证新令牌可正常使用"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// 测试令牌刷新成功",
                  "pm.test(\"Token refresh successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.tokens).to.have.property('accessToken');",
                  "    pm.expect(responseJson.data.tokens).to.have.property('refreshToken');",
                  "});",
                  "",
                  "// 测试新令牌有效性",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    const newAccessToken = responseJson.data.tokens.accessToken;",
                  "    ",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/api/auth/profile',",
                  "        method: 'GET',",
                  "        header: {",
                  "            'Authorization': 'Bearer ' + newAccessToken",
                  "        }",
                  "    }, function (err, response) {",
                  "        if (!err) {",
                  "            pm.test('New token is valid', function() {",
                  "                pm.expect(response.code).to.equal(200);",
                  "            });",
                  "        }",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// 全局预请求脚本",
          "// 检查环境变量",
          "if (!pm.environment.get('baseUrl')) {",
          "    pm.environment.set('baseUrl', 'http://localhost:3000');",
          "}",
          "",
          "// 记录请求信息",
          "console.log('🚀 请求:', pm.request.method, pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// 全局测试脚本",
          "// 记录响应时间",
          "const responseTime = pm.response.responseTime;",
          "console.log('⏱️ 响应时间:', responseTime + 'ms');",
          "",
          "// 基础响应格式验证",
          "if (pm.response.code >= 200 && pm.response.code < 300) {",
          "    pm.test('Response has JSON content-type', function () {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    });",
          "}",
          "",
          "// 错误响应格式验证",
          "if (pm.response.code >= 400) {",
          "    pm.test('Error response format', function () {",
          "        const responseJson = pm.response.json();",
          "        pm.expect(responseJson).to.have.property('success', false);",
          "        pm.expect(responseJson).to.have.property('message');",
          "    });",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ]
}
