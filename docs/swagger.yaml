openapi: 3.0.3
info:
  title: Alcms Backend API
  description: |
    Alcms CMS 资源管理系统后端 API
    
    基于 Node.js + Express.js + PostgreSQL 构建的现代化内容管理系统，
    集成了完整的用户权限管理和多媒体资源管理功能。
    
    ## 核心特性
    - 🔐 JWT 双令牌认证机制
    - 🛡️ RBAC 权限控制模型
    - 📄 CMS 资源管理系统
    - 💬 微社区系统
    - 🔍 全文搜索功能
    - 📊 数据统计分析
    
  version: 1.0.0
  contact:
    name: Alcms Team
    email: admin@alcms.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: 开发环境
  - url: https://api.alcms.com/api
    description: 生产环境

tags:
  - name: Authentication
    description: 用户认证相关接口
  - name: Users
    description: 用户管理相关接口
  - name: Resources
    description: 资源管理相关接口
  - name: Categories
    description: 分类管理相关接口
  - name: Tags
    description: 标签管理相关接口
  - name: Community Boards
    description: 社区板块管理相关接口
  - name: Community Posts
    description: 社区帖子管理相关接口
  - name: Community Comments
    description: 社区评论管理相关接口
  - name: Community Interactions
    description: 社区互动功能相关接口

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT 访问令牌

  schemas:
    # 基础响应格式
    BaseResponse:
      type: object
      properties:
        success:
          type: boolean
          description: 请求是否成功
        message:
          type: string
          description: 响应消息
      required:
        - success
        - message

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              example: false
            errors:
              type: array
              items:
                type: object
              description: 详细错误信息

    # 用户相关模型
    User:
      type: object
      properties:
        id:
          type: integer
          description: 用户ID
          example: 1
        username:
          type: string
          description: 用户名
          example: "admin"
        email:
          type: string
          format: email
          description: 邮箱
          example: "admin@alcms.com"
        nickname:
          type: string
          description: 昵称
          example: "管理员"
        avatar_url:
          type: string
          format: uri
          nullable: true
          description: 头像URL
          example: "https://example.com/avatar.jpg"
        bio:
          type: string
          nullable: true
          description: 个人简介
          example: "系统管理员"
        status:
          type: string
          enum: [normal, banned, frozen]
          description: 用户状态
          example: "normal"
        created_at:
          type: string
          format: date-time
          description: 创建时间
        updated_at:
          type: string
          format: date-time
          description: 更新时间
      required:
        - id
        - username
        - email
        - nickname
        - status

    Role:
      type: object
      properties:
        name:
          type: string
          description: 角色名称
          example: "admin"
        display_name:
          type: string
          description: 角色显示名称
          example: "管理员"
        description:
          type: string
          description: 角色描述
          example: "系统管理员角色"

    Permission:
      type: object
      properties:
        name:
          type: string
          description: 权限名称
          example: "user:list"
        resource:
          type: string
          description: 资源名称
          example: "user"
        action:
          type: string
          description: 操作名称
          example: "list"
        display_name:
          type: string
          description: 权限显示名称
          example: "查看用户列表"

    # 认证相关模型
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: 登录邮箱
          example: "admin@alcms.com"
        password:
          type: string
          description: 登录密码
          example: "admin123"
      required:
        - email
        - password

    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: "^[a-zA-Z0-9_]+$"
          description: 用户名（只能包含字母、数字、下划线）
          example: "newuser"
        email:
          type: string
          format: email
          description: 邮箱
          example: "newuser@example.com"
        password:
          type: string
          minLength: 8
          maxLength: 128
          description: 密码（至少8位）
          example: "password123"
        nickname:
          type: string
          maxLength: 100
          description: 昵称
          example: "新用户"
      required:
        - username
        - email
        - password

    TokenPair:
      type: object
      properties:
        accessToken:
          type: string
          description: 访问令牌
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: 刷新令牌
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        tokenType:
          type: string
          description: 令牌类型
          example: "Bearer"
        expiresIn:
          type: string
          description: 过期时间
          example: "1h"

    AuthResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              example: true
            data:
              type: object
              properties:
                user:
                  allOf:
                    - $ref: '#/components/schemas/User'
                    - type: object
                      properties:
                        roles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Role'
                tokens:
                  $ref: '#/components/schemas/TokenPair'

    # 用户管理相关模型
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: "^[a-zA-Z0-9_]+$"
          description: 用户名
          example: "newuser"
        email:
          type: string
          format: email
          description: 邮箱
          example: "newuser@example.com"
        password:
          type: string
          minLength: 8
          maxLength: 128
          description: 密码
          example: "password123"
        nickname:
          type: string
          maxLength: 100
          description: 昵称
          example: "新用户"
        roleName:
          type: string
          enum: [user, vip, moderator, admin]
          description: 初始角色
          example: "user"
        status:
          type: string
          enum: [normal, banned, frozen]
          description: 用户状态
          example: "normal"
      required:
        - username
        - email
        - password

    UpdateUserStatusRequest:
      type: object
      properties:
        status:
          type: string
          enum: [normal, banned, frozen]
          description: 用户状态
          example: "banned"
        reason:
          type: string
          maxLength: 500
          description: 操作原因
          example: "违规行为"
      required:
        - status

    FreezeUserRequest:
      type: object
      properties:
        reason:
          type: string
          maxLength: 500
          description: 冻结/解冻原因
          example: "账户异常活动"

    AssignRoleRequest:
      type: object
      properties:
        roleName:
          type: string
          enum: [user, vip, moderator, admin]
          description: 角色名称
          example: "vip"
      required:
        - roleName

    UpdateProfileRequest:
      type: object
      properties:
        nickname:
          type: string
          minLength: 1
          maxLength: 100
          description: 昵称
          example: "新昵称"
        avatar_url:
          type: string
          format: uri
          maxLength: 500
          description: 头像URL
          example: "https://example.com/new-avatar.jpg"
        bio:
          type: string
          maxLength: 500
          description: 个人简介
          example: "这是我的个人简介"

    UserListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              example: true
            data:
              type: object
              properties:
                users:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
                pagination:
                  type: object
                  properties:
                    page:
                      type: integer
                      description: 当前页码
                      example: 1
                    limit:
                      type: integer
                      description: 每页数量
                      example: 20
                    total:
                      type: integer
                      description: 总数量
                      example: 100
                    totalPages:
                      type: integer
                      description: 总页数
                      example: 5

    UserStatsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              example: true
            data:
              type: object
              properties:
                totalUsers:
                  type: integer
                  description: 总用户数
                  example: 1000
                activeUsers:
                  type: integer
                  description: 正常用户数
                  example: 950
                bannedUsers:
                  type: integer
                  description: 封禁用户数
                  example: 30
                frozenUsers:
                  type: integer
                  description: 冻结用户数
                  example: 20
                recentRegistrations:
                  type: integer
                  description: 近7天注册数
                  example: 50
                roleStats:
                  type: array
                  items:
                    type: object
                    properties:
                      display_name:
                        type: string
                        example: "普通用户"
                      user_count:
                        type: integer
                        example: 800

    # 资源相关模型
    Resource:
      type: object
      properties:
        id:
          type: integer
          description: 资源ID
          example: 1
        title:
          type: string
          description: 资源标题
          example: "Vue3开发教程"
        description:
          type: string
          description: 资源描述
          example: "详细的Vue3开发指南"
        content:
          type: string
          nullable: true
          description: 资源内容
        file_url:
          type: string
          format: uri
          nullable: true
          description: 文件URL
        thumbnail_url:
          type: string
          format: uri
          nullable: true
          description: 缩略图URL
        file_size:
          type: integer
          nullable: true
          description: 文件大小（字节）
        duration:
          type: integer
          nullable: true
          description: 时长（秒）
        is_free:
          type: boolean
          description: 是否免费
          example: false
        required_vip_level:
          type: string
          enum: [none, vip, premium]
          nullable: true
          description: 所需VIP等级
        required_points:
          type: integer
          description: 所需积分
          example: 100
        download_count:
          type: integer
          description: 下载次数
          example: 150
        view_count:
          type: integer
          description: 查看次数
          example: 1000
        like_count:
          type: integer
          description: 点赞次数
          example: 50
        status:
          type: string
          enum: [draft, reviewing, published, archived]
          description: 资源状态
          example: "published"
        is_public:
          type: boolean
          description: 是否公开
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # 分页参数
    PaginationQuery:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          description: 页码
          example: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
          description: 每页数量
          example: 20

    # 搜索参数
    SearchQuery:
      type: object
      properties:
        search:
          type: string
          description: 搜索关键词
          example: "vue"
        status:
          type: string
          description: 状态筛选
        category:
          type: integer
          description: 分类ID筛选
        tags:
          type: string
          description: 标签筛选（逗号分隔）
          example: "frontend,tutorial"
        sortBy:
          type: string
          enum: [created_at, updated_at, view_count, download_count, like_count]
          description: 排序字段
          example: "created_at"
        sortOrder:
          type: string
          enum: [ASC, DESC]
          description: 排序方向
          example: "DESC"

  responses:
    UnauthorizedError:
      description: 未授权 - JWT令牌无效或已过期
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "无效的访问令牌"

    ForbiddenError:
      description: 禁止访问 - 权限不足
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "权限不足"

    NotFoundError:
      description: 资源不存在
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "资源不存在"

    ValidationError:
      description: 输入验证错误
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "输入验证失败"
            errors:
              - msg: "用户名长度必须在3-50个字符之间"
                param: "username"
                location: "body"

security:
  - BearerAuth: []

paths:
  # 认证相关接口
  /auth/register:
    post:
      tags:
        - Authentication
      summary: 用户注册
      description: 注册新用户账户
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: 注册成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          description: 用户名或邮箱已存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: 用户登录
      description: 使用邮箱和密码登录
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          description: 邮箱或密码错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "邮箱或密码错误"
        '403':
          description: 账户被封禁或冻结
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: 刷新访问令牌
      description: 使用刷新令牌获取新的访问令牌
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: 刷新令牌
              required:
                - refreshToken
      responses:
        '200':
          description: 令牌刷新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      data:
                        type: object
                        properties:
                          tokens:
                            $ref: '#/components/schemas/TokenPair'
        '400':
          description: 缺少刷新令牌
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 无效的刷新令牌
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: 用户登出
      description: 撤销刷新令牌，用户登出
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: 刷新令牌
              required:
                - refreshToken
      responses:
        '200':
          description: 登出成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                success: true
                message: "登出成功"
        '400':
          description: 缺少刷新令牌
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile:
    get:
      tags:
        - Authentication
      summary: 获取当前用户信息
      description: 获取当前登录用户的详细信息
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      data:
                        type: object
                        properties:
                          user:
                            allOf:
                              - $ref: '#/components/schemas/User'
                              - type: object
                                properties:
                                  roles:
                                    type: array
                                    items:
                                      $ref: '#/components/schemas/Role'
                                  permissions:
                                    type: array
                                    items:
                                      $ref: '#/components/schemas/Permission'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # 用户管理相关接口
  /users/profile:
    put:
      tags:
        - Users
      summary: 更新用户资料
      description: 更新当前用户的个人资料
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users:
    get:
      tags:
        - Users
      summary: 获取用户列表
      description: 获取用户列表（管理员功能）
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: 页码
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: 每页数量
        - name: status
          in: query
          schema:
            type: string
            enum: [normal, banned, frozen]
          description: 状态筛选
        - name: search
          in: query
          schema:
            type: string
          description: 搜索关键词（用户名、邮箱、昵称）
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      tags:
        - Users
      summary: 创建用户
      description: 管理员创建新用户
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: 创建成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          roles:
                            type: array
                            items:
                              $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          description: 用户名或邮箱已存在

  /users/stats:
    get:
      tags:
        - Users
      summary: 获取用户统计
      description: 获取用户统计信息（管理员功能）
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /users/{userId}:
    get:
      tags:
        - Users
      summary: 获取指定用户信息
      description: 获取指定用户的详细信息
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: 用户ID
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          roles:
                            type: array
                            items:
                              $ref: '#/components/schemas/Role'
                          permissions:
                            type: array
                            items:
                              $ref: '#/components/schemas/Permission'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Users
      summary: 删除用户
      description: 管理员删除指定用户
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: 用户ID
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      data:
                        type: object
                        properties:
                          deletedUser:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 123
                              username:
                                type: string
                                example: "deleteduser"
                              email:
                                type: string
                                example: "user@example.com"
                              nickname:
                                type: string
                                example: "已删除用户"
        '400':
          description: 不能删除自己的账户
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /users/{userId}/status:
    put:
      tags:
        - Users
      summary: 更新用户状态
      description: 管理员更新用户状态（封禁/冻结/解除）
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: 用户ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserStatusRequest'
      responses:
        '200':
          description: 更新成功
        '400':
          description: 不能修改自己的状态或无效参数
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /users/{userId}/freeze:
    patch:
      tags:
        - Users
      summary: 冻结/解冻用户
      description: 管理员冻结或解冻指定用户
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: 用户ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FreezeUserRequest'
      responses:
        '200':
          description: 操作成功
        '400':
          description: 不能冻结自己的账户
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /users/{userId}/roles:
    post:
      tags:
        - Users
      summary: 分配用户角色
      description: 管理员为用户分配角色
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: 用户ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignRoleRequest'
      responses:
        '200':
          description: 分配成功
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Users
      summary: 移除用户角色
      description: 管理员移除用户的指定角色
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: 用户ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignRoleRequest'
      responses:
        '200':
          description: 移除成功
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # CMS 资源管理接口（简化版）
  /resources:
    get:
      tags:
        - Resources
      summary: 获取资源列表
      responses:
        "200":
          description: 获取成功
    post:
      tags:
        - Resources
      summary: 创建资源
      responses:
        "201":
          description: 创建成功

  /resources/{id}:
    get:
      tags:
        - Resources
      summary: 获取资源详情
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 获取成功

  # 分类管理接口
  /categories:
    get:
      tags:
        - Categories
      summary: 获取分类列表
      responses:
        "200":
          description: 获取成功

  # 标签管理接口  
  /tags:
    get:
      tags:
        - Tags
      summary: 获取标签列表
      responses:
        "200":
          description: 获取成功

  # 社区管理接口
  /community/boards:
    get:
      tags:
        - Community Boards
      summary: 获取板块列表
      responses:
        "200":
          description: 获取成功

  /community/posts:
    get:
      tags:
        - Community Posts
      summary: 获取帖子列表
      responses:
        "200":
          description: 获取成功

